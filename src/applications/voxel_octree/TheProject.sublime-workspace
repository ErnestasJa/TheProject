{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Mesh",
				"MeshPtr"
			],
			[
				"uint",
				"uint8_t"
			],
			[
				"uin",
				"uint8_t"
			],
			[
				"GetC",
				"GetChildNodes"
			],
			[
				"_w",
				"_workingDirectoryPath"
			],
			[
				"get",
				"GetVar"
			],
			[
				"Get",
				"GetGroup"
			],
			[
				"settings",
				"settingsFile"
			],
			[
				"Appl",
				"ApplySettings"
			],
			[
				"Va",
				"ValueI"
			],
			[
				"Var",
				"VarGroup"
			],
			[
				"vec",
				"vec3"
			],
			[
				"cha",
				"changeWriteDirStatus"
			],
			[
				"Save",
				"SaveLevel"
			],
			[
				"for",
				"for	For Loop"
			],
			[
				"PHYSFS_",
				"PHYSFS_write"
			],
			[
				"clam",
				"clampedMotion"
			]
		]
	},
	"buffers":
	[
		{
			"file": "launcher.py",
			"settings":
			{
				"buffer_size": 2490,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#ifndef MNODE_H\n#define MNODE_H\n\n#include <boost/move/move.hpp>\n#include \"MNodeUtil.h\"\n\n/**\nThink of efficient way to store color data.\n**/\n\nstruct MNode\n{\nprivate:\n    BOOST_MOVABLE_BUT_NOT_COPYABLE(MNode)\n\npublic:\n    uint32_t start;\n    uint8_t r,g,b;\n    uint8_t size;\n\n    union\n        {\n        uint8_t edges[12];\n        uint32_t faces[3];\n    };\n\n    MNode(BOOST_RV_REF(MNode) n);\n    MNode(uint32_t x, uint32_t y, uint32_t z, uint8_t nodeSize=1);\n    MNode(uint32_t morton, uint8_t nodeSize, uint8_t red, uint8_t green, uint8_t blue);\n    MNode(uint32_t morton, uint8_t nodeSize=1);\n    MNode();\n\n    MNode& operator=(BOOST_RV_REF(MNode) x);\n    bool operator<(const MNode &other) const;\n    bool operator==(const MNode &other) const;\n\n    inline uint32_t range_end() const;\n\n    inline bool isEmpty()\n    {\n        return faces[0]==F_EMPTY;\n    }\n\n    inline bool isEntirelySolid()\n    {\n        return faces[0]==F_SOLID && faces[1]==F_SOLID && faces[2]==F_SOLID;\n    }\n    \n    inline void setFaces(uint32_t face)\n    {\n        faces[0] = faces[1] = faces[2] = face;\n    }\n    \n    inline void solidFaces()\n    {\n        setFaces(F_SOLID);\n    }\n    \n    inline void emptyFaces() \n    {\n        setFaces(F_EMPTY);\n    }\n    \n    inline void edgeSet(uint8_t edgeIndex , bool end, uint8_t val)\n    {\n        uint8_t & edge = edges[edgeIndex];\n        edge = ((end) ? (edge&0xF)|((val)<<4) : (edge&0xF0)|(val));\n    }\n\n    inline uint8_t edgeGet(uint8_t edgeIndex, bool coord)\n    {\n        return (coord) ? edges[edgeIndex]>>4 : edges[edgeIndex]&0xF;\n    }\n    \n    inline uint8_t getEdgeEnd(int8_t dimension, uint8_t x, uint8_t y)\n    {\n        return edges[(dimension<<2) + (y<<1) + x] >> 4;\n    }\n\n    inline uint8_t getEdgeStart(int8_t dimension, uint8_t x, uint8_t y)\n    {\n        return edges[(dimension<<2) + (y<<1) + x]&0xF;\n    }\n\n    // dimension parameter values: 0 = x, 1 = y, 2 = z\n    // x and y parameters tell which edge is it.\n    inline uint8_t cubeEdgeIndex(uint8_t dimension, uint8_t x, uint8_t y)\n    {\n        return (dimension<<2) + (y<<1) + x;\n    }\n};\n\n#endif\n",
			"file": "motree/MNode.h",
			"file_size": 2094,
			"file_write_time": 1426449973000000,
			"settings":
			{
				"buffer_size": 2096,
				"line_ending": "Unix"
			}
		},
		{
			"file": "motree/MNode.cpp",
			"settings":
			{
				"buffer_size": 1283,
				"line_ending": "Unix"
			}
		},
		{
			"file": "motree/MNodeUtil.h",
			"settings":
			{
				"buffer_size": 1504,
				"line_ending": "Unix"
			}
		},
		{
			"file": "VoxelOctreeBenchmarkApp.cpp",
			"settings":
			{
				"buffer_size": 5613,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/Python/Python.sublime-build",
	"command_palette":
	{
		"height": 72.0,
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Remove Package"
			],
			[
				"rebuild",
				"ClassHierarchy: Re/Build Ctags for Class Hierarchy"
			],
			[
				"gdb",
				"Preferences: SublimeGDB Settings – Default"
			],
			[
				"settings",
				"Preferences: SublimeGDB Settings – User"
			],
			[
				"sublime",
				"Preferences: SublimeGDB Settings – Default"
			],
			[
				"SublimeGDB",
				"Preferences: SublimeGDB Settings – Default"
			]
		],
		"width": 458.0
	},
	"console":
	{
		"height": 125.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/senpai/Coding/TheProject/src/applications/voxel_octree/motree/MNodeUtil.cpp",
		"/home/senpai/Coding/TheProject/src/applications/voxel_octree/cmake/CMakeLists.txt",
		"/home/senpai/Coding/TheProject/src/applications/voxel_octree/VoxelOctreeBenchmarkApp.h",
		"/home/senpai/Coding/TheProject/src/applications/voxel_octree/VoxelOctreeApp.h",
		"/home/senpai/Coding/TheProject/src/applications/voxel_octree/VoxelOctreeApp.cpp",
		"/home/senpai/Coding/TheProject/src/applications/voxel_octree/motree/VoxMeshManager.h",
		"/home/senpai/Coding/TheProject/src/applications/voxel_octree/motree/VoxMeshManager.cpp",
		"/home/senpai/Coding/TheProject/src/engine/scenegraph/Camera.h",
		"/home/senpai/Coding/TheProject/src/applications/voxel_octree/run.sh",
		"/home/senpai/Coding/TheProject/src/engine/application/Application.cpp",
		"/home/senpai/Coding/TheProject/src/applications/voxel_octree/VoxelOctreeBenchmarkApp.cpp",
		"/home/senpai/Coding/TheProject/src/engine/opengl/Shader.h",
		"/home/senpai/.config/sublime-text-2/Packages/ClassHierarchy/Default.sublime-keymap",
		"/home/senpai/.config/sublime-text-2/Packages/Default/Default (Linux).sublime-keymap",
		"/home/senpai/.config/sublime-text-2/Packages/User/Default (Linux).sublime-keymap",
		"/home/senpai/Coding/TheProject/src/applications/voxel_octree/TheProject.sublime-project",
		"/home/senpai/Coding/TheProject/src/applications/voxel_octree/launcher.py",
		"/home/senpai/Coding/TheProject/src/engine/opengl/CubeMesh.h",
		"/home/senpai/Coding/TheProject/src/engine/utility/Helpers.cpp",
		"/home/senpai/Coding/TheProject/src/engine/utility/Helpers.inl",
		"/home/senpai/Coding/TheProject/src/engine/utility/Helpers.h",
		"/home/senpai/Coding/TheProject/src/applications/voxel_octree/bin/config.json",
		"/home/senpai/Coding/TheProject/libs/physfs/physfs.c",
		"/home/senpai/Coding/TheProject/src/engine/utility/Logger.cpp",
		"/home/senpai/Coding/TheProject/src/engine/application/ApplicationLauncher.cpp",
		"/home/senpai/Coding/TheProject/libs/boost/boost/container/vector.hpp",
		"/home/senpai/Coding/TheProject/src/applications/voxel_octree/main.cpp",
		"/home/senpai/.config/sublime-text-2/Packages/SublimeGDB/SublimeGDB.sublime-settings",
		"/home/senpai/Coding/TheProject/src/applications/voxel_octree/gdb.ini",
		"/home/senpai/Coding/TheProject/src/engine/application/Application.h",
		"/home/senpai/.config/sublime-text-2/Packages/User/SublimeGDB.sublime-settings",
		"/home/senpai/.config/sublime-text-2/Packages/Default/Preferences.sublime-settings",
		"/home/senpai/Coding/TheProject/src/engine/utility/Logger.h",
		"/home/senpai/Coding/TheProject/res/voxel_octree/config.json",
		"/home/senpai/Coding/TheProject/src/engine/core/VarJsonReader.h",
		"/home/senpai/Coding/TheProject/CMakeLists.txt",
		"/home/senpai/Coding/TheProject/build_libs.py",
		"/home/senpai/Coding/TheProject/src/engine/core/Var.h",
		"/home/senpai/Coding/TheProject/src/engine/core/VarGroup.h",
		"/home/senpai/Coding/TheProject/src/engine/opengl/AABB.cpp",
		"/home/senpai/Coding/TheProject/src/engine/opengl/AABB.h",
		"/home/senpai/Coding/TheProject/src/engine/core/VarGroup.cpp",
		"/home/senpai/Coding/TheProject/src/engine/core/Var.cpp",
		"/home/senpai/Coding/TheProject/src/engine/Core/Var.h",
		"/home/senpai/Coding/TheProject/src/applications/voxel_octree/motree/CollisionManager.cpp",
		"/home/senpai/Coding/TheProject/src/applications/voxel_octree/docs/Todo.txt",
		"/home/senpai/Coding/TheProject/tools/iqm_export.py",
		"/home/senpai/Coding/TheProject/src/engine/opengl/AABB.inl",
		"/home/senpai/Coding/TheProject/src/applications/voxel_octree/docs/Ideas.txt",
		"/home/senpai/Coding/TheProject/src/applications/voxel_octree/motree/CollisionManager.h",
		"/home/senpai/Coding/TheProject/src/applications/voxel_octree/motree/MortonOctree.cpp",
		"/home/senpai/Coding/TheProject/src/applications/voxel_octree/motree/VoxelSide.cpp",
		"/home/senpai/Coding/TheProject/src/applications/voxel_octree/motree/VoxelSide.h",
		"/home/senpai/Coding/TheProject/src/applications/voxel_octree/motree/MortonOctree.h",
		"/home/senpai/Coding/TheProject/src/applications/voxel_octree/cmake/CMakeFiles/VoxelOctree.dir/CXX.includecache",
		"/home/senpai/Coding/TheProject/src/applications/voxel_octree/motree/MNode.h",
		"/home/senpai/Coding/TheProject/src/engine/utility/Util.h",
		"/home/senpai/Coding/TheProject/src/engine/Precomp.h",
		"/home/senpai/Coding/TheProject/src/engine/utility/Vector.h",
		"/home/senpai/Coding/TheProject/src/applications/voxel_octree/player/Player.h",
		"/home/senpai/Coding/TheProject/src/applications/voxel_octree/motree/CollisionInfo.h",
		"/home/senpai/Coding/TheProject/src/applications/voxel_octree/motree/CollisionInfo.cpp",
		"/home/senpai/Coding/TheProject/src/applications/voxel_octree/motree/OctreeConstants.h",
		"/home/senpai/Coding/TheProject/src/applications/voxel_octree/motree/EVoxelSide.h",
		"/home/senpai/Coding/TheProject/src/applications/voxel_octree/player/Player.cpp",
		"/home/senpai/Coding/TheProject/src/applications/voxel_octree/motree/MortonOctree.inl",
		"/home/senpai/Coding/TheProject/src/applications/res/engine/shaders/solid_cube.frag",
		"/home/senpai/Coding/TheProject/src/applications/voxel_octree/motree/MNode.cpp",
		"/home/senpai/Coding/TheProject/src/applications/res/voxel_octree/init.py",
		"/home/senpai/Coding/TheProject/src/applications/voxel_octree/tools/tri_aabb.cpp",
		"/home/senpai/Coding/TheProject/tools/voxel_export2.py",
		"/home/senpai/Coding/TheProject/src/applications/voxel_octree/tools/setup.py",
		"/home/senpai/Coding/TheProject/src/applications/voxel_octree/tools/TriAABB.cpp",
		"/home/senpai/Coding/TheProject/tools/voxel_export.py",
		"/home/senpai/.config/sublime-text-2/Packages/User/c_shared.sublime-build"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
			"<open folders>"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"void",
			"STAERT",
			", (uint32_t)node.getEdgeStart(x,y,z)",
			"];\n",
			"+b",
			"_workingDirectoryPath",
			"());\n",
			" << std::endl",
			"cube",
			"Cube",
			"cube",
			"TCubeMesh",
			"_workingDirectoryPath",
			"AfterInit",
			"LoadLevel",
			"ReadBVoxFile",
			"InitVariables",
			"InitVa",
			"\n    std::string _appWriteDir = _resourcePath + this->ApplicationWriteDir() + PHYSFS_getDirSeparator();",
			"VoxelOctreeBenchmarkApp",
			"    virtual std::string GetAbsoluteResourcePath();\n",
			"\"\"));\n",
			"BenchSettings",
			"ret2",
			"GetGroup",
			"));\n",
			"256",
			"VoxelOctreeBenchmarkApp",
			"y",
			"VarGroup",
			"space",
			"GetVisibleSides",
			"VoxelSideToPosition",
			"EVoxelSide.h",
			"include",
			"myfunction",
			"using\n",
			"\"\n",
			"Depth",
			"m_octree",
			";\n",
			"\"\n",
			"Depth",
			"<Depth>",
			";\n",
			"CheckCollision",
			"collide",
			"m_buildNodes",
			"AddFaceToMesh",
			";\n",
			"bool LoadLevel(const std::string & levelName);",
			"IsNullVec",
			"GetBlockAxis"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "launcher.py",
					"settings":
					{
						"buffer_size": 2490,
						"regions":
						{
						},
						"selection":
						[
							[
								2285,
								2285
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 630.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "motree/MNode.h",
					"settings":
					{
						"buffer_size": 2096,
						"regions":
						{
						},
						"selection":
						[
							[
								1491,
								1491
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 765.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "motree/MNode.cpp",
					"settings":
					{
						"buffer_size": 1283,
						"regions":
						{
						},
						"selection":
						[
							[
								456,
								456
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 261.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "motree/MNodeUtil.h",
					"settings":
					{
						"buffer_size": 1504,
						"regions":
						{
						},
						"selection":
						[
							[
								18,
								18
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "VoxelOctreeBenchmarkApp.cpp",
					"settings":
					{
						"buffer_size": 5613,
						"regions":
						{
						},
						"selection":
						[
							[
								3184,
								3184
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1755.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 233.0
	},
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
			[
				"",
				"/home/senpai/Coding/IdeaTestingPlayground/Tests/Tests.sublime-project"
			]
		],
		"width": 380.0
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 289.0,
	"status_bar_visible": true
}
