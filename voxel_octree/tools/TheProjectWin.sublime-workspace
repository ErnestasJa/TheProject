{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"pat",
				"pathStart"
			],
			[
				"Render",
				"RenderGrid"
			],
			[
				"grid",
				"gridShader"
			],
			[
				"Voxe",
				"VoxelOctreeApp"
			],
			[
				"Get",
				"GetCornerSectionAxis"
			],
			[
				"st",
				"startAxis"
			],
			[
				"Sec",
				"SectionAxis"
			],
			[
				"S",
				"Straight"
			],
			[
				"pr",
				"previousSection"
			],
			[
				"Vo",
				"VoxelizeStraightSection"
			],
			[
				"m_",
				"m_voxelizer"
			],
			[
				"m",
				"m_pathSections"
			],
			[
				"GetRan",
				"GetRandomSectionAxis"
			],
			[
				"m_p",
				"m_pathStart"
			],
			[
				"sta",
				"startOfPath"
			],
			[
				"end",
				"endAxis"
			],
			[
				"start",
				"startAxis"
			],
			[
				"m_Sta",
				"m_startAxis"
			],
			[
				"Log",
				"LogPythonOutput"
			],
			[
				"Voxel",
				"VoxelSection"
			],
			[
				"ra",
				"randint"
			],
			[
				"stat",
				"startx"
			],
			[
				"dir",
				"dir_vec3"
			],
			[
				"di",
				"dir_vec3"
			],
			[
				"sca",
				"scaled_dir"
			],
			[
				"sc",
				"scaled_dir"
			],
			[
				"len",
				"length"
			],
			[
				"Add",
				"AddPoint"
			],
			[
				"Py",
				"PythonManager"
			],
			[
				"Shade",
				"ShaderBinding"
			],
			[
				"bin",
				"m_bindingIndex"
			],
			[
				"v",
				"void"
			],
			[
				"video",
				"video_group"
			],
			[
				"ver",
				"vertexFile"
			],
			[
				"Open",
				"OpenGLUtil"
			],
			[
				"Application",
				"GetApplicationSettingsManager"
			],
			[
				"frag",
				"fragmentBuffer"
			],
			[
				"verte",
				"vertexBuffer"
			],
			[
				"File",
				"FileSystem"
			],
			[
				"file",
				"fileSystem"
			],
			[
				"app",
				"appContext"
			],
			[
				"a",
				"AppContext"
			],
			[
				"config",
				"configPath"
			],
			[
				"return",
				"returnCode"
			],
			[
				"appl",
				"applicationDirectory"
			],
			[
				"pyth",
				"pythonLoadPath"
			],
			[
				"w",
				"width"
			],
			[
				"ini",
				"initialize"
			],
			[
				"App",
				"ApplicationSettingsManager"
			],
			[
				"A",
				"ApplicationSettingsManager"
			],
			[
				"Init",
				"InitWindowAndOpenGL"
			],
			[
				"m_app",
				"m_appContext"
			],
			[
				"log",
				"logPath"
			],
			[
				"P",
				"PHYSFS_init"
			],
			[
				"get",
				"GetApplicationId"
			],
			[
				"Byte",
				"ByteBuffer"
			],
			[
				"buff",
				"bufferPtr"
			],
			[
				"ByteB",
				"ByteBufferPtr"
			],
			[
				"re",
				"return"
			],
			[
				"ge",
				"generic_string"
			],
			[
				"p",
				"path"
			],
			[
				"F",
				"FileSystem"
			],
			[
				"pri",
				"private"
			],
			[
				"work",
				"working_directory_path"
			],
			[
				"rest",
				"resource_path"
			],
			[
				"m_f",
				"m_flags"
			],
			[
				"Var",
				"VarGroup"
			],
			[
				"i",
				"if	If Condition"
			],
			[
				"VAR",
				"VARS"
			],
			[
				"grou",
				"groupValue"
			],
			[
				"var",
				"varGroup"
			],
			[
				"BV",
				"bvoxLoader"
			],
			[
				"bui",
				"buildSucceeded"
			],
			[
				"tria",
				"triangle"
			],
			[
				"tri",
				"tri_list"
			],
			[
				"vo",
				"voxel_output"
			],
			[
				"trian",
				"triangles"
			],
			[
				"uint_",
				"uint32_t"
			],
			[
				"write",
				"write_voxels"
			],
			[
				"fi",
				"filename"
			],
			[
				"triangl",
				"triangle_output"
			],
			[
				"triang",
				"triangle_count"
			],
			[
				"ex",
				"except"
			],
			[
				"copy",
				"copy_libs"
			],
			[
				"buildp",
				"buildPath"
			],
			[
				"th",
				"threadChoices"
			],
			[
				"fu",
				"fullLibPath"
			],
			[
				"compile_boost_",
				"compile_boost_build_sys"
			],
			[
				"compile",
				"compile_other_libs"
			],
			[
				"BOOST",
				"boostpath"
			],
			[
				"L",
				"Launcher"
			],
			[
				"settings",
				"settingsFile"
			],
			[
				"Appl",
				"ApplySettings"
			],
			[
				"Va",
				"ValueI"
			],
			[
				"vec",
				"vec3"
			],
			[
				"uint",
				"uint8_t"
			],
			[
				"cha",
				"changeWriteDirStatus"
			],
			[
				"Save",
				"SaveLevel"
			],
			[
				"for",
				"for	For Loop"
			],
			[
				"PHYSFS_",
				"PHYSFS_write"
			],
			[
				"clam",
				"clampedMotion"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "#include \"Precomp.h\"\n#include \"VoxelOctreeApp.h\"\n#include \"core/CoreInc.h\"\n#include \"motree/MotreeInc.h\"\n#include \"opengl/OpenGLInc.h\"\n#include \"utility/Logger.h\"\n#include \"utility/Timer.h\"\n#include \"renderer/Renderer.h\"\n#include \"resources/ResourcesInc.h\"\n#include \"application/SettingsManager.h\"\n#include \"application/Window.h\"\n#include \"player/Player.h\"\n#include <boost/algorithm/string/replace.hpp>\n\n\nVoxelOctreeApp * VoxelOctreeApp::m_instance = nullptr;\n\nVoxelOctreeApp * VoxelOctreeApp::Instance()\n{\n	return m_instance;\n}\n\nVoxelOctreeApp::VoxelOctreeApp(uint32_t argc, const char ** argv): Application(argc, argv)\n{\n	m_instance = this;\n}\n\nVoxelOctreeApp::~VoxelOctreeApp()\n{\n\n}\n\nvoid VoxelOctreeApp::InitResources()\n{\n	auto loader = GetContext().GetResourceManager();\n	sh = loader->LoadShader(\"shaders/solid_cube\");\n	cam = share(new Camera(glm::vec3(0, 0, -5), glm::vec3(0, 0, 5), glm::vec3(0, 1, 0), 1.7777777f, 45.0f, 0.1, 1024.0f));\n\n	octree = share(new MortonOctTree());\n	collisionManager = new CollisionManager(octree);\n	octreeGen = new VoxMeshManager(octree);\n	octreeGen->GenAllChunks();\n	player = new Player(cam, collisionManager, glm::vec3(3, 3, 3));\n	cube = new CubeMesh(player->GetAABB());\n	bvoxLoader = share(new BVoxLoader(octree, GetContext().GetLogger()));\n}\n\nbool VoxelOctreeApp::Init()\n{\n	/*if(!InitSimple(\"Voxel octree application\"))\n		return false;*/\n\n	if(!InitContextBasics() || !InitFileSystem() || !LoadConfig())\n	{\n		return false;\n	}\n\n	//If we want to override some settings for window.\n	auto & video_group = GetContext().GetApplicationSettingsManager()->GetGroup(\"video\");\n	video_group.GetVar(\"window_width\").Value(int(1280));\n	video_group.GetVar(\"window_height\").Value(int(720));\n	InitWindowAndOpenGL(\"Supper awesome window, waow\");\n\n	GetContext().GetWindow()->SigKeyEvent().connect(sigc::mem_fun(this, &VoxelOctreeApp::OnKeyEvent));\n	GetContext().GetWindow()->SigMouseKey().connect(sigc::mem_fun(this, &VoxelOctreeApp::OnMouseKey));\n	GetContext().GetWindow()->SigMouseMoved().connect(sigc::mem_fun(this, &VoxelOctreeApp::OnMouseMove));\n\n	renderer = share(new Renderer(nullptr));\n	renderer->Enable({GL_DEPTH_TEST, GL_CULL_FACE});\n	renderer->SetCullFace(GL_BACK);\n	renderer->SetFrontFace(GL_CCW);\n	renderer->SetClearColor(0.4, 0.8, 0.2, 0.0);\n	InitResources();\n	AfterInit();\n	GetContext().GetTimer()->tick();\n	return true;\n}\n\nvoid VoxelOctreeApp::ClearOctree()\n{\n	octree->GetChildNodes().clear();\n	octreeGen->GetMeshes().clear();\n}\n\nvoid VoxelOctreeApp::GenerateOctreeMeshes()\n{\n	octree->SortLeafNodes();\n	octree->RemoveDuplicateNodes();\n	octreeGen->GenAllChunks();\n}\n\nbool VoxelOctreeApp::LoadLevel(const std::string & levelName)\n{\n	ClearOctree();\n	bvoxLoader->ReadFile(levelName);\n	GenerateOctreeMeshes();\n}\n\nbool VoxelOctreeApp::SaveLevel(const std::string & levelName)\n{\n	bvoxLoader->WriteFile(levelName);\n}\n\n#include \"PathGen/PathManager.h\"\n#include \"opengl/GridMesh.h\"\n\n///NOTE: this is temporary, pls ignore.\nstatic MeshPtr gridMesh;\nstatic glm::ivec3 pathStart(200,0,200);\nvoid VoxelOctreeApp::AfterInit()\n{\n	gridMesh = share(new GridMesh(1));\n	gridShader = GetContext().GetResourceManager()->LoadShader(\"shaders/solid_unlit\");\n\n	ClearOctree();\n\n		PathManagerPtr pathManager = share(new PathManager(pathStart));\n\n		for(uint32_t i = 0; i < 30; i++)\n			pathManager->AppendRandomSection();\n\n\n		/*\n		pathManager->AppendSection(SectionType::Straight);\n		pathManager->AppendSection(SectionType::Straight);\n		pathManager->AppendSection(SectionType::Straight);\n		pathManager->AppendSection(SectionType::Corner);\n		pathManager->AppendSection(SectionType::Straight);\n		pathManager->AppendSection(SectionType::Corner);\n		pathManager->AppendSection(SectionType::Straight);\n		pathManager->AppendSection(SectionType::Corner);\n		pathManager->AppendSection(SectionType::Straight);*/\n\n		SetPlayerPosition(pathStart.x,20,pathStart.z);\n\n	GenerateOctreeMeshes();\n}\n\nvoid VoxelOctreeApp::SetPlayerPosition(float x, float y, float z)\n{\n	player->GetPosition().x = x;\n	player->GetPosition().y = y;\n	player->GetPosition().z = z;\n\n	player->GetVelocity().x = 0;\n	player->GetVelocity().y = 0;\n	player->GetVelocity().z = 0;\n}\n\nstatic bool renderWireframe = false;\nstatic float speed = 5.0;\nbool wk = false, ak = false, sk = false, dk = false;\nbool VoxelOctreeApp::Update()\n{\n	if (GetContext().GetWindow()->Update() && !GetContext().GetWindow()->GetShouldClose() && !GetContext().GetWindow()->GetKey(GLFW_KEY_ESCAPE))\n	{\n		GetContext().GetTimer()->tick();\n\n		///PLAYER MOVE CODE\n		auto look = cam->GetLook();\n		auto right = cam->GetRight();\n\n		look = glm::normalize(look) * speed;\n		right = glm::normalize(right) * speed;\n\n		if (wk)\n		{\n			player->GetVelocity().x = look.x;\n			player->GetVelocity().z = look.z;\n			if(player->GetFlyEnabled()) player->GetVelocity().y = look.y;\n		}\n		else if (sk)\n		{\n			player->GetVelocity().x = -look.x;\n			player->GetVelocity().z = -look.z;\n			if(player->GetFlyEnabled()) player->GetVelocity().y = -look.y;\n		}\n\n		if (dk)\n		{\n			player->GetVelocity().x = right.x;\n			player->GetVelocity().z = right.z;\n		}\n		else if (ak)\n		{\n			player->GetVelocity().x = -right.x;\n			player->GetVelocity().z = -right.z;\n		}\n\n		if ((!(wk || ak || sk || dk)) && (player->OnGround() || player->GetFlyEnabled()))\n		{\n			player->GetVelocity().x = 0;\n			player->GetVelocity().z = 0;\n			if(player->GetFlyEnabled()) player->GetVelocity().y = 0;\n		}\n		///~PLAYER MOVE CODE END\n\n		player->Update(((float)GetContext().GetTimer()->get_delta_time()) / 1000.0f);\n		cam->Update(0);\n\n		RenderScene();\n\n		return true;\n	}\n	return false;\n}\n\nvoid VoxelOctreeApp::RenderScene()\n{\n	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n\n	RenderGrid();\n\n	glm::mat4 Model = glm::translate(glm::mat4(1.0f), player->GetPosition()); // glm::mat4(1.0f);//\n	glm::mat4 MVP   = cam->GetViewProjMat() * Model;\n	sh->GetBinding(\"mvp\").Set(MVP);\n	sh->Set();\n	cube->Render(true, false);\n\n	Model = glm::mat4(1.0f);\n	MVP   = cam->GetViewProjMat() * Model;\n	sh->GetBinding(\"mvp\").Set(MVP);\n	sh->Set();\n\n	if (renderWireframe)\n		glPolygonMode( GL_FRONT_AND_BACK, GL_LINE );\n	else\n		glPolygonMode( GL_FRONT_AND_BACK, GL_FILL );\n\n	octreeGen->RenderAllMeshes();\n\n	GetContext().GetOpenGLExtensionLoader()->check_and_output_errors();\n	GetContext().GetWindow()->SwapBuffers();\n}\n\nvoid VoxelOctreeApp::RenderGrid()\n{\n	glm::mat4 Model = glm::translate(glm::mat4(1.0f), glm::vec3(pathStart.x, pathStart.y, pathStart.z));\n	gridShader->GetBinding(\"mvp\").Set(cam->GetViewProjMat()*Model);\n	gridShader->Set();\n	gridMesh->render_lines();\n}\n\nbool VoxelOctreeApp::Exit()\n{\n	return true;\n}\n\nvoid VoxelOctreeApp::OnWindowClose()\n{\n\n}\n\n#define UPDATE_KEY(var,key_enum)\\\n  if(action == GLFW_PRESS && key==key_enum) var = true;\\\n  if(action == GLFW_RELEASE && key==key_enum) var = false\n\n\nvoid VoxelOctreeApp::OnKeyEvent(int32_t key, int32_t scan_code, int32_t action, int32_t modifiers)\n{\n	if (action == GLFW_PRESS && key == GLFW_KEY_LEFT_SHIFT)\n		speed = 20.0f;\n\n	if (action == GLFW_RELEASE && key == GLFW_KEY_LEFT_SHIFT)\n		speed = 5.0f;\n\n	if (action == GLFW_PRESS && key == GLFW_KEY_LEFT_CONTROL)\n		speed = 50.0f;\n\n	if (action == GLFW_RELEASE && key == GLFW_KEY_LEFT_CONTROL)\n		speed = 5.0f;\n\n	if (action == GLFW_RELEASE && key == GLFW_KEY_U)\n		SaveLevel(\"test_save.bvox\");\n\n	if (action == GLFW_RELEASE && key == GLFW_KEY_G)\n		player->SetFlyEnabled(!player->GetFlyEnabled());\n\n\n	if (key == GLFW_KEY_SPACE && !player->GetFlyEnabled())\n	{\n		player->Jump(20);\n	}\n\n	UPDATE_KEY(wk, GLFW_KEY_W);\n	UPDATE_KEY(ak, GLFW_KEY_A);\n	UPDATE_KEY(sk, GLFW_KEY_S);\n	UPDATE_KEY(dk, GLFW_KEY_D);\n\n	if (key == GLFW_KEY_1)\n		renderWireframe = true;\n	else if (key == GLFW_KEY_2)\n		renderWireframe = false;\n}\n\nvoid VoxelOctreeApp::OnMouseMove(double x, double y)\n{\n\n}\n\nvoid VoxelOctreeApp::OnMouseKey(int32_t button, int32_t action, int32_t mod)\n{\n	glm::vec3 lookat = glm::normalize(cam->GetLook());\n	glm::vec3 position = cam->GetPosition() + lookat; // shoot one unit in front of player\n\n	if (action == GLFW_PRESS)\n	{\n		switch (button)\n		{\n		case GLFW_MOUSE_BUTTON_LEFT:\n		{\n			CollisionInfo info(position, lookat);\n			collisionManager->Collide(info, 0, glm::ivec3(0));\n\n			if (info.nearestDistance < INFINITY)\n			{\n				uint32_t x, y, z;\n				decodeMK(info.node.start, x, y, z);\n\n				auto it = std::lower_bound(octree->GetChildNodes().begin(), octree->GetChildNodes().end(), info.node);\n				decodeMK(it->start, x, y, z);\n\n				uint32_t mk = info.node.start & CHUNK_MASK;\n				if (it != octree->GetChildNodes().end())\n				{\n					octree->GetChildNodes().erase(it);\n					octreeGen->RebuildChunk(mk);\n				}\n			}\n			break;\n		}\n		case GLFW_MOUSE_BUTTON_RIGHT:\n		{\n			CollisionInfo info(position, lookat);\n			collisionManager->Collide(info, 0, glm::ivec3(0));\n\n			if (info.nearestDistance < INFINITY)\n			{\n				uint32_t x, y, z;\n				decodeMK(info.node.start, x, y, z);\n\n				/// add node\n				VoxelSide side = collisionManager->GetCollisionSide(glm::vec3(x, y, z), position, lookat);\n				glm::ivec3 pos = VoxelSideToPosition(side);\n\n				if ((pos.x == -1 && x == 0) || (pos.y == -1 && y == 0) || (pos.z == -1 && z == 0))\n					break;\n\n				x += pos.x;\n				y += pos.y;\n				z += pos.z;\n\n				uint32_t mk = encodeMK(x, y, z);\n\n				octree->AddNode(MNode(mk, 1, 128, 128 , 128));\n				octreeGen->RebuildChunk(mk & CHUNK_MASK);\n			}\n			break;\n		}\n		}\n	}\n}\n\nstd::string VoxelOctreeApp::GetApplicationId()\n{\n	return \"voxel_octree\";\n}\n\nMortonOctTreePtr VoxelOctreeApp::GetOctree()\n{\n	return octree;\n}",
			"file": "/C/Coding/TheProject/voxel_octree/VoxelOctreeApp.cpp",
			"file_size": 9511,
			"file_write_time": 131134829299094842,
			"settings":
			{
				"buffer_size": 9415,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"",
				"Package Control: Advanced Install Package"
			],
			[
				"gdb",
				"Preferences: SublimeGDB Settings – Default"
			],
			[
				"settings",
				"Preferences: SublimeGDB Settings – User"
			],
			[
				"sublime",
				"Preferences: SublimeGDB Settings – Default"
			],
			[
				"SublimeGDB",
				"Preferences: SublimeGDB Settings – Default"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 125.0,
		"history":
		[
			"factorial(2)",
			"pow(2,3)",
			"pow(3,3)",
			"3^3",
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Coding/TheProject/voxel_octree",
		"/C/Coding/TheProject/voxel_octree/bin",
		"/C/Coding/TheProject/voxel_octree/cmake",
		"/C/Coding/TheProject/voxel_octree/player",
		"/C/Coding/TheProject/voxel_octree/renderer"
	],
	"file_history":
	[
		"/home/serengeor/Coding/Project/voxel_octree/PathGen/IPathSection.h",
		"/home/serengeor/Coding/Project/voxel_octree/PathGen/SectionVoxelizer.h",
		"/home/serengeor/Coding/Project/voxel_octree/PathGen/PathSectionStraight.h",
		"/home/serengeor/Coding/Project/voxel_octree/PathGen/PathManager.h",
		"/home/serengeor/Coding/Project/voxel_octree/VoxelOctreeApp.cpp",
		"/home/serengeor/Coding/Project/voxel_octree/VoxelOctreeApp.h",
		"/home/serengeor/Coding/Project/voxel_octree/launcher.py",
		"/home/serengeor/Coding/Project/voxel_octree/PathGen/PathSectionCorner.h",
		"/home/serengeor/Coding/Project/voxel_octree/PathGen/IPathFunction.h",
		"/home/serengeor/Coding/Project/voxel_octree/PathGen/IVoxelOutput.h",
		"/home/serengeor/Coding/Project/TheEngine/src/opengl/GridMesh.h",
		"/home/serengeor/Coding/Project/voxel_octree/PathGen/PathConfig.h",
		"/home/serengeor/Coding/Project/TheEngine/build_tools/linux/build_engine.py",
		"/usr/include/c++/5.2.0/bits/shared_ptr.h",
		"/home/serengeor/Coding/Project/voxel_octree/player/Player.cpp",
		"/home/serengeor/Coding/Project/voxel_octree/player/Player.h",
		"/home/serengeor/Coding/Project/voxel_octree/PathGen/OctreeVoxelOutput.h",
		"/home/serengeor/Coding/Project/voxel_octree/cmake/CMakeLists.txt",
		"/home/serengeor/Coding/Project/voxel_octree/py/PythonManager.h",
		"/home/serengeor/Coding/Project/voxel_octree/py/PythonOutputRedirect.h",
		"/home/serengeor/Coding/Project/voxel_octree/py/OctreeApplicationPy.cpp",
		"/home/serengeor/Coding/Project/voxel_octree/py/scripts/PathSections.py",
		"/home/serengeor/Coding/Project/voxel_octree/main.cpp",
		"/home/serengeor/Coding/Project/voxel_octree/py/scripts/runme.py",
		"/home/serengeor/Coding/Project/voxel_octree/bin/workfile",
		"/home/serengeor/Coding/Project/voxel_octree/bin/error.log",
		"/home/serengeor/Coding/Project/voxel_octree/py/scripts/Vec3.py",
		"/home/serengeor/Coding/Project/voxel_octree/py/scripts/PathGenerator.py",
		"/home/serengeor/Coding/Project/voxel_octree/00",
		"/home/serengeor/Coding/Project/TheEngine/src/core/FileSystem.cpp",
		"/home/serengeor/Coding/Project/voxel_octree/py/OctreeUtils.cpp",
		"/home/serengeor/Coding/Project/voxel_octree/motree/MNode.h",
		"/home/serengeor/Coding/Project/voxel_octree/bin/voxel_octree/python/init.py",
		"/home/serengeor/Coding/Project/voxel_octree/bin/voxel_octree/python/runme.py",
		"/home/serengeor/Coding/Project/voxel_octree/bin/voxel_octree/python/PathGenerator.py",
		"/home/serengeor/Coding/Project/voxel_octree/bin/voxel_octree/python/PathSections.py",
		"/home/serengeor/Coding/Project/.gitignore",
		"/home/serengeor/Coding/Project/TheEngine/src/opengl/material/Shader.h",
		"/home/serengeor/Coding/Project/TheEngine/src/opengl/material/ShaderBinding.h",
		"/home/serengeor/Coding/Project/voxel_octree/py/cpputils.cpp",
		"/usr/include/python3.5m/pythonrun.h",
		"/home/serengeor/Coding/Project/voxel_octree/bin/res/python/init.py",
		"/home/serengeor/Coding/Project/TheEngine/src/opengl/material/Shader.cpp",
		"/home/serengeor/Coding/Project/voxel_octree/VoxelOctreeBenchmarkApp.h",
		"/home/serengeor/Coding/Project/TheEngine/src/opengl/OpenGLInc.h",
		"/home/serengeor/Coding/Project/voxel_octree/PathGen/PathGenerator.h",
		"/home/serengeor/Coding/Project/voxel_octree/PathGen/BasicPathFunction.h",
		"/home/serengeor/.config/sublime-text-2/Packages/Default/Default (Linux).sublime-keymap",
		"/home/serengeor/Coding/Project/voxel_octree/py/OctreeUtils.h",
		"/home/serengeor/Coding/Project/TheEngine/src/opengl/material/ShaderBinding.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/opengl/material/TBindingValue.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/opengl/material/TBindingValue.h",
		"/home/serengeor/Coding/Project/TheEngine/src/opengl/material/Material.h",
		"/home/serengeor/Coding/Project/TheEngine/src/opengl/material/Material.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/opengl/material/IBindingValue.h",
		"/home/serengeor/Coding/Project/TheEngine/src/gui/GUIEnvironment.cpp",
		"/home/serengeor/Coding/Project/voxel_octree/renderer/Renderer.h",
		"/home/serengeor/Coding/Project/voxel_octree/renderer/Renderer.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/CMakeLists.txt",
		"/home/serengeor/Coding/Project/TheEngine/src/opengl/Material/ShaderBinding.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/resources/ShaderLoader.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/opengl/Quad.h",
		"/home/serengeor/Coding/Project/TheEngine/src/gui/font_rendering/FontRenderer.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/gui/GUIPane.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/opengl/SlicedGUIQuad.h",
		"/home/serengeor/Coding/Project/TheEngine/src/gui/GUIButton.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/gui/GUISlider.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/opengl/CubeMesh.h",
		"/home/serengeor/Coding/Project/TheEngine/src/gui/GUIStaticText.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/gui/GUICheckbox.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/gui/GUIWindow.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/opengl/GUIQuad.h",
		"/home/serengeor/Coding/Project/TheEngine/src/ForwardDecl.h",
		"/home/serengeor/Coding/Project/TheEngine/src/opengl/Material/IBindingValue.h",
		"/home/serengeor/Coding/Project/TheEngine/src/opengl/Material/TBindingValue.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/opengl/Material/TBindingValue.h",
		"/home/serengeor/Coding/Project/TheEngine/src/opengl/Material/Material.h",
		"/home/serengeor/Coding/Project/TheEngine/src/opengl/Material/ShaderBinding.h",
		"/home/serengeor/Coding/Project/TheEngine/src/opengl/Material/MVar.h",
		"/home/serengeor/Coding/Project/TheEngine/src/opengl/Material/MVar.cpp",
		"/home/serengeor/Coding/Project/voxel_octree/AppForwardDecl.h",
		"/home/serengeor/Coding/Project/voxel_octree/motree/MotreeInc.h",
		"/home/serengeor/Coding/Project/TheEngine/src/resources/ResourcesInc.h",
		"/home/serengeor/Coding/Project/TheEngine/src/opengl/MVar.h",
		"/home/serengeor/Coding/Project/TheEngine/src/opengl/Shader.h",
		"/home/serengeor/Coding/Project/TheEngine/src/opengl/ShaderBinding.h",
		"/home/serengeor/Coding/Project/TheEngine/src/core/CoreInc.h",
		"/home/serengeor/Coding/Project/TheEngine/src/opengl/Shader.cpp",
		"/home/serengeor/Coding/Project/voxel_octree/renderer/SolidMaterial.h",
		"/home/serengeor/Coding/Project/TheEngine/src/opengl/Material.h",
		"/home/serengeor/Coding/Project/TheEngine/src/opengl/Camera.h",
		"/home/serengeor/Coding/Project/TheEngine/src/utility/Plane3d.h",
		"/home/serengeor/Coding/Project/TheEngine/src/scenegraph/Camera.h",
		"/home/serengeor/Coding/Project/TheEngine/src/utility/Logger.h",
		"/home/serengeor/Coding/Project/TheEngine/src/opengl/Material.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/gui/font_rendering/FontRenderer.h",
		"/home/serengeor/Coding/Project/TheEngine/src/resources/ShaderLoader.h",
		"/home/serengeor/Coding/Project/TheEngine/src/gui/GUIEnvironment.h",
		"/home/serengeor/Coding/Project/voxel_octree/PathGen/PathGen.h",
		"/home/serengeor/Downloads/uploads-9b-3e-02-95-6d-blender_maze_gen.py",
		"/home/serengeor/Coding/Project/TheEngine/src/resources/ResourceManager.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/resources/ResourceManager.h",
		"/home/serengeor/Coding/Project/TheEngine/src/resources/MeshLoader.h",
		"/home/serengeor/Coding/Project/TheEngine/src/resources/MeshLoader.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/resources/IMeshLoader.h",
		"/home/serengeor/Coding/Project/TheEngine/src/resources/IMeshLoader.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/resources/IQMLoader.h",
		"/home/serengeor/Coding/Project/TheEngine/src/resources/IQMLoader.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/.tags_sorted_by_file",
		"/home/serengeor/Coding/Project/TheEngine/src/.tags",
		"/home/serengeor/Coding/Project/TheEngine/src/application/AppContext.h",
		"/home/serengeor/Coding/Project/TheEngine/src/application/AppContext.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/application/Application.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/resources/PNGLoader.h",
		"/home/serengeor/Coding/Project/TheEngine/src/resources/PNGLoader.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/resources/TGAloader.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/resources/TGAloader.h",
		"/home/serengeor/Coding/Project/TheEngine/src/resources/ImageLoader.h",
		"/home/serengeor/Coding/Project/TheEngine/src/resources/ImageLoader.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/gui/custom_elements/GUIColorPicker.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/gui/custom_elements/GUIColorPicker.h",
		"/home/serengeor/Coding/Project/TheEngine/src/opengl/Texture.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/opengl/Texture.h",
		"/home/serengeor/Coding/Project/TheEngine/src/resources/ResourceCache.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/resources/IImageLoader.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/resources/IImageLoader.h",
		"/home/serengeor/Coding/Project/voxel_octree/VoxelOctreeBenchmarkApp.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/resources/RecourceManager.h"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
			"C:\\Coding\\TheProject",
			"<open files>,/home/serengeor/Coding/Project/TheEngine/src",
			"<open files>",
			"<open files>,/home/serengeor/Coding/Project/TheEngine/src",
			"<open files>",
			"/home/serengeor/Coding/Project/TheEngine/src",
			"<open folders>"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"GetLogger()",
			"MaterialPtr",
			"send",
			"sstart",
			"endOffset",
			"IsSweptColliding",
			"PathGenerator",
			"dir_vec3",
			"w2qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrgfttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttm",
			"mjnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn",
			"Shader",
			"MVar",
			"value",
			"binding_index",
			"MVar",
			"uint32_t",
			"pname",
			"ImageLoader",
			"ShowCompilationInfo",
			"psstr",
			"psobj",
			"msg",
			"link",
			"200",
			"405",
			"iqmloader",
			"iMeshLoader",
			"mesh_loader",
			"iimage_loader",
			"iImageLoader",
			"image_loader",
			"shader_loader",
			"Image_ptr",
			"image",
			"DSP",
			"OpenGLExtensionLoader",
			"OpenGLUtil",
			"this->Ctx()->_logger",
			"this->GetContext()->_window",
			"GetContext()->logger",
			"Ctx()->_logger",
			"m_appContext->fileSystem",
			"window",
			"_should",
			"Window",
			"ApplicationWindow",
			" Window",
			"Window",
			"m_appContext->logger",
			"m_appContext->settingsManager",
			"m_appContext->fileSystem",
			"m_appContext->logger",
			"();\n",
			"file",
			"_logger",
			"cpp",
			"_logger",
			"\n{\n	",
			"LoadGroup",
			"BuildGroup",
			"sh",
			"cpp",
			"_appContext",
			"Ctx",
			"();\n",
			"~FileSystem",
			"fs",
			"m_app->Ctx()",
			"();\n",
			");\n",
			">_",
			"_argv",
			";\n",
			"wd",
			"replace",
			";\n",
			"virtual",
			"();\n",
			"struct AppContext",
			"class AppContext",
			"_workingDirectoryPath",
			"Path",
			"#",
			"RemoveFromEnd",
			"GetAbsoluteDir",
			");\n",
			"Count",
			";\n",
			"InitFileSystem",
			"\"\n",
			"_appContext",
			"InitSettings",
			"{\n",
			"ReadBVoxFile",
			"shutil",
			"triBoxOverlap",
			", ",
			".\"},\n",
			"ply",
			"ExportBVOX",
			"ExportPLY",
			"IOPLYOrientationHelper",
			"glm::tvec4<uint8_t>",
			">), ",
			">),",
			"SRC_PATH",
			")\n",
			"get_shared_libs_from_dir",
			")\n",
			" if key == \"Boost\":\n                self.helper.compile_boost()\n",
			"variable",
			")\n",
			"build",
			"\"\"\n",
			"senpai",
			"/home/senpai/Coding/TheProject",
			"/home/serengeor/Coding/Project",
			"Example",
			"_workingDirectoryPath",
			"AfterInit",
			"LoadLevel",
			"ReadBVoxFile",
			"InitVariables",
			"InitVa",
			"\n    std::string _appWriteDir = _resourcePath + this->ApplicationWriteDir() + PHYSFS_getDirSeparator();",
			"VoxelOctreeBenchmarkApp",
			"    virtual std::string GetAbsoluteResourcePath();\n",
			"\"\"));\n"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"sectionEnd",
			"sectionStart",
			"offset",
			"SectionVoxelizer",
			"TBindingValue",
			"m_value",
			"index",
			"TBindingValue",
			"GLEnum",
			"fsstr",
			"fsobj",
			"IQMLoader",
			"IMeshLoader",
			"MeshLoader",
			"IImageLoader",
			"ImageLoader",
			"ShaderLoader",
			"Image",
			"OpenGLExtensionLoader",
			"GetContext().GetLogger()",
			"GetContext().GetWindow()",
			"GetContext().GetLogger()",
			"GetContext().GetFileSystem()",
			" ApplicationWindow",
			"ApplicationWindow",
			"GetContext().GetLogger()",
			"GetContext().GetApplicationSettingsManager()",
			"GetContext().GetFileSystem()",
			"GetContext().GetLogger()",
			"filePath",
			"m_logger",
			"this->GetContext()",
			"fileSystemVarGroup",
			"m_appContext",
			">",
			"workingDirectory",
			"wd",
			"",
			"ExportBVOX",
			"VoxOrientationHelper",
			"glm::detail::tvec4<uint8_t>",
			"/home/serengeor/Coding/Project",
			"Launcher",
			""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/C/Coding/TheProject/voxel_octree/VoxelOctreeApp.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9415,
						"regions":
						{
						},
						"selection":
						[
							[
								8799,
								8799
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 4344.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 29.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.CppYCM.3":
	{
		"height": 0.0
	},
	"output.CppYCM.4":
	{
		"height": 0.0
	},
	"output.astyle_error_message":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 308.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "TheProjectWin.sublime-project",
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"/home/senpai/Coding/IdeaTestingPlayground/Tests/Tests.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 285.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
