{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"video",
				"video_group"
			],
			[
				"Get",
				"GetContext"
			],
			[
				"ver",
				"vertexFile"
			],
			[
				"Open",
				"OpenGLUtil"
			],
			[
				"Application",
				"GetApplicationSettingsManager"
			],
			[
				"frag",
				"fragmentBuffer"
			],
			[
				"verte",
				"vertexBuffer"
			],
			[
				"File",
				"FileSystem"
			],
			[
				"file",
				"fileSystem"
			],
			[
				"app",
				"appContext"
			],
			[
				"a",
				"AppContext"
			],
			[
				"config",
				"configPath"
			],
			[
				"m_",
				"m_fileHandle"
			],
			[
				"return",
				"returnCode"
			],
			[
				"appl",
				"applicationDirectory"
			],
			[
				"pyth",
				"pythonLoadPath"
			],
			[
				"w",
				"width"
			],
			[
				"ini",
				"initialize"
			],
			[
				"App",
				"ApplicationSettingsManager"
			],
			[
				"A",
				"ApplicationSettingsManager"
			],
			[
				"Py",
				"PHYSFS_deinit"
			],
			[
				"Init",
				"InitWindowAndOpenGL"
			],
			[
				"m_app",
				"m_appContext"
			],
			[
				"log",
				"logPath"
			],
			[
				"P",
				"PHYSFS_init"
			],
			[
				"get",
				"GetApplicationId"
			],
			[
				"Byte",
				"ByteBuffer"
			],
			[
				"buff",
				"bufferPtr"
			],
			[
				"ByteB",
				"ByteBufferPtr"
			],
			[
				"re",
				"return"
			],
			[
				"ge",
				"generic_string"
			],
			[
				"p",
				"path"
			],
			[
				"F",
				"FileSystem"
			],
			[
				"pri",
				"private"
			],
			[
				"work",
				"working_directory_path"
			],
			[
				"rest",
				"resource_path"
			],
			[
				"m_f",
				"m_flags"
			],
			[
				"Var",
				"VarGroup"
			],
			[
				"i",
				"if	If Condition"
			],
			[
				"VAR",
				"VARS"
			],
			[
				"grou",
				"groupValue"
			],
			[
				"v",
				"Value"
			],
			[
				"var",
				"varGroup"
			],
			[
				"BV",
				"bvoxLoader"
			],
			[
				"bui",
				"buildSucceeded"
			],
			[
				"tria",
				"triangle"
			],
			[
				"tri",
				"tri_list"
			],
			[
				"vo",
				"voxel_output"
			],
			[
				"trian",
				"triangles"
			],
			[
				"uint_",
				"uint32_t"
			],
			[
				"write",
				"write_voxels"
			],
			[
				"fi",
				"filename"
			],
			[
				"triangl",
				"triangle_output"
			],
			[
				"triang",
				"triangle_count"
			],
			[
				"ex",
				"except"
			],
			[
				"copy",
				"copy_libs"
			],
			[
				"buildp",
				"buildPath"
			],
			[
				"th",
				"threadChoices"
			],
			[
				"fu",
				"fullLibPath"
			],
			[
				"compile_boost_",
				"compile_boost_build_sys"
			],
			[
				"compile",
				"compile_other_libs"
			],
			[
				"BOOST",
				"boostpath"
			],
			[
				"L",
				"Launcher"
			],
			[
				"settings",
				"settingsFile"
			],
			[
				"Appl",
				"ApplySettings"
			],
			[
				"Va",
				"ValueI"
			],
			[
				"vec",
				"vec3"
			],
			[
				"uint",
				"uint8_t"
			],
			[
				"cha",
				"changeWriteDirStatus"
			],
			[
				"Save",
				"SaveLevel"
			],
			[
				"for",
				"for	For Loop"
			],
			[
				"PHYSFS_",
				"PHYSFS_write"
			],
			[
				"clam",
				"clampedMotion"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/home/serengeor/Coding/Project/TheEngine/src/application/Application.h",
			"settings":
			{
				"buffer_size": 876,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/serengeor/Coding/Project/TheEngine/src/application/Application.cpp",
			"settings":
			{
				"buffer_size": 5010,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/serengeor/Coding/Project/voxel_octree/VoxelOctreeApp.h",
			"settings":
			{
				"buffer_size": 1575,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/serengeor/Coding/Project/voxel_octree/VoxelOctreeApp.cpp",
			"settings":
			{
				"buffer_size": 9454,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/serengeor/Coding/Project/voxel_octree/main.cpp",
			"settings":
			{
				"buffer_size": 1871,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/serengeor/Coding/Project/voxel_octree/VoxelOctreeBenchmarkApp.cpp",
			"settings":
			{
				"buffer_size": 5732,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/serengeor/Coding/Project/voxel_octree/VoxelOctreeBenchmarkApp.h",
			"settings":
			{
				"buffer_size": 1143,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "import fnmatch\nimport os, shutil, subprocess\n\nclass OS:\n    linux = \"linux\"\n    windows = \"windows\"\n\nclass Helper:\n    def __init__(self):\n        self.enginePath = os.path.dirname(os.path.dirname(os.getcwd()))\n        self.paths = {\n            \"engine\": os.path.join(self.enginePath, \"src\"),\n            \"libraries\": os.path.join(self.enginePath, \"libs\") \n        }\n        \n        self.buildcores = \"-j9\"\n\n        self.platform = \"\"\n        if os.name == \"posix\":\n            self.platform = OS.linux\n        else:\n            self.platform = OS.windows\n\n    def get_path_for(self, name):\n        return self.paths[name]\n\n    def get_build_path_for(self, name):\n        return os.path.join(self.paths[name],\"build\")\n\n    def get_libs_from_dir(self, dir):\n        match = []\n\n        for root, dirnames, filenames in os.walk(dir):\n            for filename in fnmatch.filter(filenames, '*.a'):\n                if filename != \"objects.a\":\n                    match.append([filename,os.path.join(root, filename)])\n                    \n        return match\n\n    def get_shared_libs_from_dir(self, dir ):\n        match = []\n        \n        for root, dirnames, filenames in os.walk(dir):\n            for filename in fnmatch.filter(filenames, '*.so'):\n                match.append([filename,os.path.join(root, filename)])\n                    \n        return match\n\n    def get_lib_path(self, libFolderName):\n        return os.path.join(self.get_path_for(\"libraries\"), libFolderName)\n\n    def copy_libs(self):\n        os.chdir(self.get_path_for(\"engine\"))\n\n        matches = []\n        shared_matches = []\n\n        directories = [\n            self.get_path_for(\"libraries\"),\n            self.get_lib_path(\"python\"),\n            self.get_lib_path(\"bullet\"),\n            self.get_lib_path(\"libccd\"),\n            self.get_lib_path(\"boost\"),\n            self.get_build_path_for(\"engine\")\n        ]\n        \n        #copy static libs\n        for directory in directories:\n            matches.extend(self.get_libs_from_dir(directory))\n\n        for f in matches:\n            filename = os.path.join(self.get_build_path_for('libraries'), f[0])\n            try:\n                shutil.move(f[1], filename)\n            except:\n                pass\n\n        #copy shared libs\n        for directory in directories:\n            shared_matches.extend(self.get_shared_libs_from_dir(directory))\n\n        dbgPath = os.path.join(self.get_build_path_for('engine'), \"Debug\")\n        relPath = os.path.join(self.get_build_path_for('engine'), \"Release\")\n       \n        if os.path.isdir(dbgPath) == False:\n            os.makedirs(dbgPath)\n       \n        if os.path.isdir(relPath) == False:\n            os.makedirs(relPath)\n            \n        for f in shared_matches:\n            dbg_filename = os.path.join(dbgPath, f[0])\n            rel_filename = os.path.join(relPath, f[0])\n            \n            if f[1]!=dbg_filename:\n                shutil.copyfile(f[1], dbg_filename)\n            \n            if f[1]!=rel_filename:\n                shutil.copyfile(f[1], rel_filename)\n            \n\n        #Write lib names to file for easy config\n        fname = os.path.join(self.get_build_path_for('libraries'), \"liblist.txt\")\n        file = open(fname, \"w\")\n\n        print(\"Libs found: \" + str(len(matches)))\n\n        for f in matches:\n            name = f[0]\n            file.write(name[3:len(name)-2]+\"\\n\")\n\n        file.close()\n\n        os.chdir(self.get_path_for('engine'))\n\n    def compile_other_libs(self):\n        os.chdir(self.get_path_for('libraries'))\n\n        try:\n            os.mkdir('build')\n        except OSError as e:\n            print(\"Caught this little bad boy: \" + str(e))\n        \n        os.chdir('build')\n\n        if(self.platform == \"linux\"):\n            subprocess.call('cmake ../ -DCMAKE_BUILD_TYPE=RelWithDebInfo -G \"Unix Makefiles\"', shell=True)\n            subprocess.call('make ' + self.buildcores, shell=True)\n        \n        os.chdir(self.get_path_for('engine'))\n\n    def compile_engine(self):\n        os.chdir(self.get_path_for('engine'))\n\n        try:\n            os.mkdir('build')\n        except OSError as e:\n            pass\n\n        os.chdir('build')\n\n        if(self.platform == \"linux\"):\n            subprocess.call('cmake ../ -DCMAKE_BUILD_TYPE=RelWithDebInfo -G \"Unix Makefiles\" -DPROJECT_PATH:STRING=\"/home/serengeor/Coding/Project/TheEngine\"', shell=True)\n            subprocess.call('make ' + self.buildcores, shell=True)\n       \n        os.chdir(self.get_path_for('engine'))\n\n    def compile_boost_build_sys(self):\n        os.chdir(self.get_lib_path('boost'))\n        subprocess.call('sh bootstrap.sh gcc', shell=True)\n        os.chdir(self.get_path_for('engine'))\n\n    def compile_boost_bcp_tool(self):\n        os.chdir(self.get_lib_path('boost'))\n        subprocess.call('./b2 tools/bcp', shell=True)\n        os.chdir(self.get_path_for('engine'))\n\n    def compile_boost(self):\n        os.chdir(self.get_lib_path('boost'))\n        subprocess.call('./b2 ' + self.buildcores + ' --without-python --build-dir=\"../../build\"  toolset=gcc link=static threading=multi release', shell=True)\n        os.chdir(self.get_path_for('engine'))\n\nfrom tkinter import Tk, Frame, Checkbutton, Button, OptionMenu, Label, W\nfrom tkinter import IntVar, StringVar, RIGHT, LEFT, BOTH\n\nclass Launcher(Frame):\n  \n    def __init__(self, parent):\n        Frame.__init__(self, parent)   \n         \n        self.parent = parent        \n        self.initUI()\n        self.helper = Helper()\n        \n    def initUI(self):\n        self.parent.title(\"Lib builder\")\n        self.pack(fill=BOTH, expand=1)\n        self.columnconfigure(0, pad=5)\n        self.columnconfigure(1, pad=5)\n        self.check_vars = {}\n        self.check_buttons = {}\n        self.addCheckButtons([\n            [\"BoostBS\", (0,\"Build boost build system?\")],\n            [\"BoostBCP\", (0,\"Build boost bcp tool?\")],\n            [\"Boost\", (0,\"Build boost?\")],\n            [\"Other\", (0,\"Build other libraries?\")],\n            [\"Engine\", (1,\"Build engine!\")],\n            [\"Copy\", (0, \"Copy all lib.\")]\n            ])\n        \n        w = Label(self, text=\"Thread count:\")\n        w.grid(row=len(self.check_vars)+1, column=0, padx=8, sticky=W)\n    \n        self.threadChoices = [ \"2\", \"3\", \"5\", \"9\", \"17\" ]\n        self.threadChoice = StringVar(self, value=self.threadChoices[3])\n\n        w = OptionMenu(self, self.threadChoice, *self.threadChoices)\n        w.grid(row=len(self.check_vars)+1, column=1, sticky=W)\n\n        self.okButton = Button(self, text=\"Start\", command=self.onClick)\n        self.okButton.grid(row=len(self.check_vars)+2, column=0, sticky=W)\n\n    def addCheckButtons(self, listception):\n        index = 0\n        for items in listception:\n            key = items[0]\n            val = items[1]\n            self.rowconfigure(index, pad=3)\n            var = IntVar(value=val[0])\n            cb = Checkbutton(self, text=val[1], variable=var).grid(row=index, column=0, sticky=W)\n            self.check_vars[key]=var\n            self.check_buttons[key]=cb\n            index+=1\n\n    def onClick(self):\n        buildSucceeded = False\n        self.buildcores = \"-j\" + self.threadChoice.get()\n        \n        for key,val in self.check_vars.items():\n            if val.get() == 0:\n                continue\n\n            elif key == \"Boost\":\n                self.helper.compile_boost()\n\n            elif key == \"Engine\":\n                self.helper.compile_engine()\n\n            elif key == \"BoostBS\":\n                self.helper.compile_boost_build_sys()\n\n            elif key == \"Other\":\n                self.helper.compile_other_libs()\n\n            elif key == \"Copy\":\n                self.helper.copy_libs()\n\ndef main():\n    root = Tk()\n    root.geometry(\"250x200+10+10\")\n    root.resizable(0,0)\n    app = Launcher(root)\n    root.mainloop()  \n\n\nif __name__ == '__main__':\n    main()  \nCraigsuter2, ",
			"file": "/home/serengeor/Coding/Project/TheEngine/build_tools/linux/build_engine.py",
			"file_size": 7853,
			"file_write_time": 1445183200000000,
			"settings":
			{
				"buffer_size": 7866,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/serengeor/Coding/Project/voxel_octree/launcher.py",
			"settings":
			{
				"buffer_size": 2593,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/User/PythonCpp.sublime-build",
	"command_palette":
	{
		"height": 372.0,
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: List Packages"
			],
			[
				"",
				"Package Control: Advanced Install Package"
			],
			[
				"gdb",
				"Preferences: SublimeGDB Settings – Default"
			],
			[
				"settings",
				"Preferences: SublimeGDB Settings – User"
			],
			[
				"sublime",
				"Preferences: SublimeGDB Settings – Default"
			],
			[
				"SublimeGDB",
				"Preferences: SublimeGDB Settings – Default"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 125.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/serengeor/Coding/Project/TheEngine/build_tools/linux/build_engine.py",
		"/home/serengeor/Coding/Project/TheEngine/src/opengl/OpenGLExtensionLoader.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/gui/font_rendering/FontRenderer.cpp",
		"/home/serengeor/Coding/Project/voxel_octree/VoxelOctreeApp.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/application/Application.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/core/FileSystem.h",
		"/home/serengeor/Coding/Project/TheEngine/src/core/FileSystem.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/application/SettingsManager.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/scenegraph/Camera.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/application/AppContext.h",
		"/home/serengeor/Coding/Project/TheEngine/src/application/AppContext.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/opengl/OpenGLExtensionLoader.h",
		"/home/serengeor/Coding/Project/TheEngine/src/ForwardDecl.h",
		"/home/serengeor/Coding/Project/voxel_octree/main.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/CMakeLists.txt",
		"/home/serengeor/Coding/Project/TheEngine/src/core/File.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/core/File.h",
		"/home/serengeor/Coding/Project/TheEngine/src/core/IFile.h",
		"/home/serengeor/Coding/Project/voxel_octree/launcher.py",
		"/home/serengeor/Coding/Project/TheEngine/src/resources/ShaderLoader.cpp",
		"/home/serengeor/Coding/Project/voxel_octree/bin/voxel_octree/shaders/solid_cube.vert",
		"/home/serengeor/Coding/Project/voxel_octree/bin/voxel_octree/shaders/solid_cube.frag",
		"/home/serengeor/Coding/Project/TheEngine/src/resources/ShaderLoader.h",
		"/home/serengeor/Coding/Project/TheEngine/src/opengl/Shader.h",
		"/home/serengeor/Coding/Project/TheEngine/libs/boost/boost/filesystem/path.hpp",
		"/home/serengeor/Coding/Project/TheEngine/src/opengl/OpenGLUtil.cpp",
		"/home/serengeor/Coding/Project/voxel_octree/VoxelOctreeBenchmarkApp.h",
		"/home/serengeor/Coding/Project/voxel_octree/VoxelOctreeBenchmarkApp.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/resources/ResourceCache.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/resources/ResourceCache.h",
		"/home/serengeor/Coding/Project/TheEngine/src/utility/Logger.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/resources/PNGLoader.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/gui/GUIEnvironment.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/gui/GUIEnvironment.h",
		"/home/serengeor/Coding/Project/TheEngine/src/resources/MeshLoader.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/resources/ImageLoader.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/resources/TGAloader.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/core/VarJsonReader.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/gui/font_rendering/FontRenderer.h",
		"/usr/include/X11/X.h",
		"/home/serengeor/Coding/Project/TheEngine/src/application/Window.h",
		"/home/serengeor/Coding/Project/TheEngine/src/application/InputHandler.h",
		"/home/serengeor/Coding/Project/TheEngine/src/application/Window.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/application/Application.h",
		"/home/serengeor/Coding/Project/TheEngine/src/application/InputHandler.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/opengl/OpenGLUtil.h",
		"/home/serengeor/Coding/Project/TheEngine/src/resources/MeshLoader.h",
		"/home/serengeor/Coding/Project/TheEngine/src/resources/IQMloader.h",
		"/home/serengeor/Coding/Project/TheEngine/src/resources/IQMLoader.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/utility/Logger.h",
		"/home/serengeor/Coding/Project/TheEngine/src/scenegraph/Camera.h",
		"/home/serengeor/Coding/Project/TheEngine/src/resources/TGAloader.h",
		"/home/serengeor/Coding/Project/TheEngine/src/resources/PNGLoader.h",
		"/home/serengeor/Coding/Project/TheEngine/src/resources/ImageLoader.h",
		"/home/serengeor/Coding/Project/TheEngine/src/gui/custom_elements/GUIColorPicker.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/core/VarJsonReader.h",
		"/home/serengeor/Coding/Project/TheEngine/src/application/SettingsManager.h",
		"/home/serengeor/Coding/Project/TheEngine/src/utility/Timer.h",
		"/home/serengeor/Coding/Project/voxel_octree/py/OctreeApplicationPy.cpp",
		"/home/serengeor/.config/sublime-text-2/Packages/User/template_snippet.sublime-snippet",
		"/home/serengeor/Coding/Project/voxel_octree/tools/Application.sublime-project",
		"/home/serengeor/Coding/Project/voxel_octree/tools/blender/voxel_export/voxel_export.py",
		"/usr/share/blender/2.76/scripts/addons/io_scene_obj/export_obj.py",
		"/home/serengeor/Modeling/sponza.mtl",
		"/home/serengeor/Modeling/sponza.obj",
		"/home/serengeor/Modeling/sponza.blend",
		"/home/serengeor/Coding/Project/voxel_octree/bin/voxel_octree/config/config.cfg",
		"/home/serengeor/Coding/Project/voxel_octree/cmake/CMakeLists.txt",
		"/home/serengeor/Coding/Project/TheEngine/src/core/VarGroup.h",
		"/home/serengeor/Coding/Project/voxel_octree/bin/voxel_octree/python/mnode.py",
		"/home/serengeor/Coding/Project/voxel_octree/bin/voxel_octree/python/init.py",
		"/home/serengeor/Coding/Project/voxel_octree/bin/voxel_octree/config.cfg",
		"/usr/include/c++/5.2.0/bits/basic_string.h",
		"/usr/include/c++/5.2.0/bits/shared_ptr_base.h",
		"/home/serengeor/Coding/Project/TheEngine/libs/physfs/physfs.c",
		"/home/serengeor/Coding/Project/voxel_octree/py/OctreeUtils.h",
		"/home/serengeor/.config/sublime-text-2/Packages/SublimeGDB/SublimeGDB.sublime-settings",
		"/home/serengeor/.config/sublime-text-2/Packages/SublimeGDB/Default.sublime-keymap",
		"/home/serengeor/Coding/Project/voxel_octree/cmake/CMakeCache.txt",
		"/home/serengeor/Coding/Project/voxel_octree/VoxelOctreeApp.h",
		"/home/serengeor/Coding/Project/TheEngine/src/core/Var.cpp",
		"/home/serengeor/Coding/Project/TheEngine/src/core/EFileMode.h",
		"/home/serengeor/Coding/Project/TheEngine/src/utility/Helpers.cpp",
		"/home/serengeor/.config/sublime-text-2/Packages/RegReplace/reg_replace.sublime-settings",
		"/home/serengeor/.config/sublime-text-2/Packages/User/Default (Linux).sublime-keymap",
		"/home/serengeor/.config/sublime-text-2/Packages/RegReplace/Default.sublime-commands",
		"/home/serengeor/.config/sublime-text-2/Packages/Default/Default (Linux).sublime-keymap",
		"/home/serengeor/Coding/Project/TheEngine/src/gui/GUISkin.cpp",
		"/home/serengeor/Coding/Project/TheEngine/libs/boost/boost/smart_ptr/detail/shared_count.hpp",
		"/home/serengeor/Coding/Project/TheEngine/src/utility/Helpers.h",
		"/home/serengeor/Coding/Project/TheEngine/src/core/FileSystemHelpers.h",
		"/home/serengeor/.config/sublime-text-2/Packages/User/PythonCpp.sublime-build",
		"/home/serengeor/Coding/Project/TheEngine/src/core/Var.h",
		"/home/serengeor/.config/sublime-text-2/Packages/C++/C++.sublime-build",
		"/home/serengeor/Coding/Project/voxel_octree/motree/BVoxLoader.cpp",
		"/home/serengeor/Coding/Project/TheEngine/build_tools/linux/",
		"/home/serengeor/.config/sublime-text-2/Packages/Python/Python.sublime-build",
		"/home/serengeor/.local/share/Steam/steam.sh",
		"/home/serengeor/.config/sublime-text-2/Packages/SublimeAStyleFormatter/SublimeAStyleFormatter.sublime-settings",
		"/home/serengeor/.config/sublime-text-2/Packages/User/SublimeAStyleFormatter.sublime-settings",
		"/home/serengeor/Coding/Project/voxel_octree/motree/CollisionManager.h",
		"/home/serengeor/Coding/Project/voxel_octree/motree/BVoxLoader.h",
		"/home/serengeor/Coding/Project/voxel_octree/motree/CollisionManager.cpp",
		"/home/serengeor/Coding/Project/voxel_octree/motree/MortonOctree.h",
		"/home/serengeor/Coding/Project/voxel_octree/tools/blender/tri_aabb.cpp",
		"/home/serengeor/Coding/Project/voxel_octree/bin/res/python/init.py",
		"/home/serengeor/Coding/Project/voxel_octree/bin/res/python/mnode.py",
		"/usr/share/blender/2.75/scripts/addons/io_mesh_ply/export_ply.py",
		"/home/serengeor/Coding/Project/voxel_octree/tools/blender/voxel_export/__init__.py",
		"/home/serengeor/Coding/Project/voxel_octree/tools/setup.py",
		"/home/serengeor/untitled.bvox",
		"/tmp/blender.crash.txt",
		"/usr/share/blender/2.75/scripts/addons/io_mesh_ply/__init__.py",
		"/home/serengeor/Coding/Project/voxel_octree/tools/blender/voxel_export.py",
		"/home/serengeor/Coding/Project/voxel_octree/run.sh",
		"/home/serengeor/Coding/Project/TheEngine/src/opengl/BufferObject.h",
		"/home/serengeor/Coding/Project/TheEngine/src/opengl/BufferObject.cpp",
		"/home/serengeor/Coding/Project/voxel_octree/bin/res/voxel_octree/config.json",
		"/home/serengeor/Coding/Project/libs/CMakeLists.txt",
		"/home/serengeor/Coding/Project/build_engine.py",
		"/home/serengeor/Coding/Project/libs/build/liblist.txt",
		"/home/serengeor/Stream/stream_start",
		"/home/serengeor/Stream/key.txt",
		"/home/serengeor/Coding/Project/engine/CMakeLists.txt",
		"/home/serengeor/Coding/Project/build_libraries.py",
		"/home/serengeor/Coding/Project/voxel_octree/hello.go",
		"/home/serengeor/Coding/Project/libs/liblist.txt",
		"/home/serengeor/Coding/Project/CMakeLists.txt"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
			"<open files>",
			"<open files>,/home/serengeor/Coding/Project/TheEngine/src",
			"<open files>",
			"/home/serengeor/Coding/Project/TheEngine/src",
			"<open folders>"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"OpenGLExtensionLoader",
			"OpenGLUtil",
			"this->Ctx()->_logger",
			"this->GetContext()->_window",
			"GetContext()->logger",
			"Ctx()->_logger",
			"m_appContext->fileSystem",
			"window",
			"_should",
			"Window",
			"ApplicationWindow",
			" Window",
			"Window",
			"m_appContext->logger",
			"m_appContext->settingsManager",
			"m_appContext->fileSystem",
			"m_appContext->logger",
			"();\n",
			"file",
			"_logger",
			"cpp",
			"_logger",
			"\n{\n	",
			"LoadGroup",
			"BuildGroup",
			"sh",
			"cpp",
			"_appContext",
			"Ctx",
			"();\n",
			"~FileSystem",
			"fs",
			"m_app->Ctx()",
			"();\n",
			");\n",
			">_",
			"_argv",
			";\n",
			"wd",
			"replace",
			";\n",
			"virtual",
			"();\n",
			"struct AppContext",
			"class AppContext",
			"_workingDirectoryPath",
			"Path",
			"#",
			"RemoveFromEnd",
			"GetAbsoluteDir",
			");\n",
			"Count",
			";\n",
			"InitFileSystem",
			"\"\n",
			"_appContext",
			"InitSettings",
			"{\n",
			"ReadBVoxFile",
			"shutil",
			"triBoxOverlap",
			", ",
			".\"},\n",
			"ply",
			"ExportBVOX",
			"ExportPLY",
			"IOPLYOrientationHelper",
			"glm::tvec4<uint8_t>",
			">), ",
			">),",
			"SRC_PATH",
			")\n",
			"get_shared_libs_from_dir",
			")\n",
			" if key == \"Boost\":\n                self.helper.compile_boost()\n",
			"variable",
			")\n",
			"build",
			"\"\"\n",
			"senpai",
			"/home/senpai/Coding/TheProject",
			"/home/serengeor/Coding/Project",
			"Example",
			"_workingDirectoryPath",
			"AfterInit",
			"LoadLevel",
			"ReadBVoxFile",
			"InitVariables",
			"InitVa",
			"\n    std::string _appWriteDir = _resourcePath + this->ApplicationWriteDir() + PHYSFS_getDirSeparator();",
			"VoxelOctreeBenchmarkApp",
			"    virtual std::string GetAbsoluteResourcePath();\n",
			"\"\"));\n",
			"BenchSettings",
			"ret2",
			"GetGroup",
			"));\n",
			"256",
			"VoxelOctreeBenchmarkApp",
			"y",
			"VarGroup",
			"space",
			"GetVisibleSides",
			"VoxelSideToPosition",
			"EVoxelSide.h",
			"include",
			"myfunction",
			"using\n",
			"\"\n",
			"Depth",
			"m_octree",
			";\n",
			"\"\n",
			"Depth",
			"<Depth>",
			";\n",
			"CheckCollision",
			"collide",
			"m_buildNodes",
			"AddFaceToMesh",
			";\n",
			"bool LoadLevel(const std::string & levelName);",
			"IsNullVec",
			"GetBlockAxis"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"OpenGLExtensionLoader",
			"GetContext().GetLogger()",
			"GetContext().GetWindow()",
			"GetContext().GetLogger()",
			"GetContext().GetFileSystem()",
			" ApplicationWindow",
			"ApplicationWindow",
			"GetContext().GetLogger()",
			"GetContext().GetApplicationSettingsManager()",
			"GetContext().GetFileSystem()",
			"GetContext().GetLogger()",
			"filePath",
			"m_logger",
			"this->GetContext()",
			"fileSystemVarGroup",
			"m_appContext",
			">",
			"workingDirectory",
			"wd",
			"",
			"ExportBVOX",
			"VoxOrientationHelper",
			"glm::detail::tvec4<uint8_t>",
			"/home/serengeor/Coding/Project",
			"Launcher",
			""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/home/serengeor/Coding/Project/TheEngine/src/application/Application.h",
					"settings":
					{
						"buffer_size": 876,
						"regions":
						{
						},
						"selection":
						[
							[
								597,
								597
							]
						],
						"settings":
						{
							"syntax": "Packages/C++ Starting Kit/C.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/home/serengeor/Coding/Project/TheEngine/src/application/Application.cpp",
					"settings":
					{
						"buffer_size": 5010,
						"regions":
						{
						},
						"selection":
						[
							[
								1965,
								1965
							]
						],
						"settings":
						{
							"syntax": "Packages/C++ Starting Kit/C.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 278.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/home/serengeor/Coding/Project/voxel_octree/VoxelOctreeApp.h",
					"settings":
					{
						"buffer_size": 1575,
						"regions":
						{
						},
						"selection":
						[
							[
								812,
								812
							]
						],
						"settings":
						{
							"syntax": "Packages/C++ Starting Kit/C.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 273.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/home/serengeor/Coding/Project/voxel_octree/VoxelOctreeApp.cpp",
					"settings":
					{
						"buffer_size": 9454,
						"regions":
						{
						},
						"selection":
						[
							[
								2589,
								2589
							]
						],
						"settings":
						{
							"syntax": "Packages/C++ Starting Kit/C.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 741.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/home/serengeor/Coding/Project/voxel_octree/main.cpp",
					"settings":
					{
						"buffer_size": 1871,
						"regions":
						{
						},
						"selection":
						[
							[
								1221,
								1221
							]
						],
						"settings":
						{
							"syntax": "Packages/C++ Starting Kit/C.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 468.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/home/serengeor/Coding/Project/voxel_octree/VoxelOctreeBenchmarkApp.cpp",
					"settings":
					{
						"buffer_size": 5732,
						"regions":
						{
						},
						"selection":
						[
							[
								5069,
								5069
							]
						],
						"settings":
						{
							"syntax": "Packages/C++ Starting Kit/C.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 529.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/home/serengeor/Coding/Project/voxel_octree/VoxelOctreeBenchmarkApp.h",
					"settings":
					{
						"buffer_size": 1143,
						"regions":
						{
						},
						"selection":
						[
							[
								984,
								984
							]
						],
						"settings":
						{
							"syntax": "Packages/C++ Starting Kit/C.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/home/serengeor/Coding/Project/TheEngine/build_tools/linux/build_engine.py",
					"settings":
					{
						"buffer_size": 7866,
						"regions":
						{
						},
						"selection":
						[
							[
								504,
								504
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2727.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "/home/serengeor/Coding/Project/voxel_octree/launcher.py",
					"settings":
					{
						"buffer_size": 2593,
						"regions":
						{
						},
						"selection":
						[
							[
								662,
								662
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 29.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.astyle_error_message":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 309.0
	},
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
			[
				"",
				"/home/senpai/Coding/IdeaTestingPlayground/Tests/Tests.sublime-project"
			]
		],
		"width": 380.0
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 341.0,
	"status_bar_visible": true
}
