{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"selecte",
				"selectedThreads"
			],
			[
				"selec",
				"selectedBuildType"
			],
			[
				"Get",
				"GetCmakeCommand"
			],
			[
				"use",
				"use_nmake"
			],
			[
				"mat",
				"match_index	statement"
			],
			[
				"ls",
				"lst_len	statement"
			],
			[
				"to",
				"total_matches	statement"
			],
			[
				"patter",
				"pattern_len	statement"
			],
			[
				"patte",
				"pattern_items_matched	statement"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/C/Coding/TheProject/docs/Ideas.txt",
			"settings":
			{
				"buffer_size": 1,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/C/Coding/TheProject/engine/examples/RenderingSample/RenderingSample.cpp",
			"settings":
			{
				"buffer_size": 2958,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "from test_runner import TestRunner\nfrom engine_builder import Builder\n\nBuilder().Compile()\nTestRunner().Run()\n",
			"file": "/C/Coding/TheProject/engine/build/build.py",
			"file_size": 110,
			"file_write_time": 131136677172269722,
			"settings":
			{
				"buffer_size": 110,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/C/Coding/TheProject/build/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 1576,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "import fnmatch\nimport os, sys, shutil, subprocess, platform\nfrom distutils.dir_util import copy_tree\nfrom test_runner import TestRunner\nfrom build_config import *\nfrom build_common import *\n\n\npaths = PathManager()\n\nclass Builder:\n	Threads = 9\n\n	def __init__(self):\n		self.clean_compile_directory = False\n		self.build_samples = True\n		self.use_jom = False\n		self.use_nmake = False\n		self.__ParseArgs()\n\n	def __ParseArgs(self):\n		print(BuildMessage.ArgumentsMsg)\n		print(len(sys.argv))\n		\n		for i in range(1, len(sys.argv)):\n			print(sys.argv[i])\n			\n			if sys.argv[i] == \"-clean\":\n				self.clean_compile_directory = True\n			elif sys.argv[i] == \"-nosamples\":\n				self.build_samples = False\n			elif sys.argv[i] == \"-usejom\":\n				self.use_jom = True\n			elif sys.argv[i] == \"-nmake\":\n				self.use_nmake = True\n\n		print(BuildMessage.ArgumentsMsg)\n\n	def CleanCompileDir(self, dir):\n		try:\n			shutil.rmtree(dir)\n		except:\n			pass\n\n	def CreateAndChDir(self, dir):\n		if self.clean_compile_directory:\n			self.CleanCompileDir(dir)\n\n		if os.path.exists(dir) == False:\n			try:\n				os.mkdir(dir)\n			except OSError as e:\n				print(BuildMessage.FailedToCreateDirectory.format(dir))\n				raise\n\n		os.chdir(dir)\n		return True\n\n	@PreserveDirectory(paths.Paths['cwd'])\n	def Compile(self):\n		self.CreateAndChDir(paths.Paths['build'])\n		self.CreateAndChDir(paths.Paths['lib'])\n\n		os.chdir(paths.CMakePaths['glxw'])\n		subprocess.check_call('python glxw_gen.py', shell=True)\n\n		for key, value in paths.CMakePaths.items():\n			if self.build_samples == False and key == \"examples\":\n				continue\n\n			self.CreateAndChDir(join(paths.Paths['build'], key))\n\n			subprocess.check_call(self.GetCmakeCommand(key, value), shell=True)\n			subprocess.check_call(self.GetCompileCommand(), shell=True)\n\n			if key == \"examples\":\n				self.CopyExampleResources()\n\n\n			self.CopyLibs()\n\n	def GetCmakeCommand(self, key, value):\n		OS = platform.system()\n\n		command = 'cmake \"' + value + '\"' \n\n		if key == \"physfs\":\n			command += ' -DCXXFLAGS=\"Wno-unused-variable\" -DPHYSFS_BUILD_TEST=\"FALSE\"'\n\n		command += ' -DENGINE_PATH:PATH=\"' + paths.Paths['engine'] + '\"'\n\n		if OS == \"Windows\":\n			if self.use_jom or self.use_nmake:\n				command += ' -DCMAKE_BUILD_TYPE=RelWithDebInfo -G \"NMake Makefiles\"'\n			else:\n				command += ' -DCMAKE_BUILD_TYPE=RelWithDebInfo -G \"MinGW Makefiles\"'\n		else:\n			command += ' -DCMAKE_BUILD_TYPE=RelWithDebInfo -G \"Unix Makefiles\"'\n\n		print(\"Cmake command: \" + command)\n\n		return command\n\n	def GetCompileCommand(self):\n		OS = platform.system()\n\n		command = ''\n\n		if OS == \"Windows\":\n			if self.use_jom:\n				command += 'jom.exe -j' + str(Builder.Threads)\n			if self.use_nmake:\n				command += 'nmake'\n			else:\n				command += 'mingw32-make.exe -j' + str(Builder.Threads)\n		else:\n			command += 'make -j' + str(Builder.Threads)\n\n		print(\"Build command: \" + command)\n\n		return command\n\n\n	def GetLibs(self, dir):\n		match = []\n		extension = \"\"\n\n		if platform.system() == \"Windows\" and (self.use_jom or self.use_nmake):\n			extension = \".lib\"\n		else:\n			extension = \".a\"\n\n		for root, dirnames, filenames in os.walk(dir):\n			for filename in fnmatch.filter(filenames, '*' + extension):\n				if filename != \"objects\" + extension:\n					match.append([filename,os.path.join(root, filename)])\n						\n		return match\n\n	def CopyLibs(self):\n		matches = []\n		matches.extend(self.GetLibs(os.getcwd()))\n\n		for f in matches:\n			moved_file_path = os.path.join(paths.Paths[\"lib\"], f[0])\n			try:\n				shutil.move(f[1], moved_file_path)\n			except:\n				print(BuildMessage.FailedToMoveFile.format(f[1], moved_file_path))\n				raise\n\n	def CopyExampleResources(self):\n		copy_tree(paths.Paths[\"resources\"], paths.Paths[\"example_bin\"])\n\n",
			"file": "/C/Coding/TheProject/engine/build/engine_builder.py",
			"file_size": 3826,
			"file_write_time": 131150365283282642,
			"settings":
			{
				"buffer_size": 3672,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Coding/TheProject/engine/src/render/GLRendererDebugMessageMonitor.cpp",
			"settings":
			{
				"buffer_size": 2052,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Coding/TheProject/engine/third_party/glfw/src/internal.h",
			"settings":
			{
				"buffer_size": 29344,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "import os\n\npdir = os.path.dirname\njoin = os.path.join\n\ndef PreserveDirectory(directory):\n	def PreserveDecorator(fn):\n		def Wrapped(*args, **kwargs):\n			os.chdir(directory)\n			ret = fn(*args, **kwargs)\n			os.chdir(directory)\n			return ret\n		return Wrapped\n	return PreserveDecorator",
			"file": "/C/Coding/TheProject/engine/build/build_common.py",
			"file_size": 280,
			"file_write_time": 131136677172269722,
			"settings":
			{
				"buffer_size": 280,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/C/Coding/TheProject/engine/src/render/OpenGL.hpp",
			"settings":
			{
				"buffer_size": 14195,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 104.0,
		"last_filter": "Package Control: insta",
		"selected_items":
		[
			[
				"Package Control: insta",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			]
		],
		"width": 472.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"list(a.values())[0]",
			"a.values()[0]",
			"a.items()[0].value",
			"a.get(1,1)",
			"a.get(4,1)",
			"a[1]",
			"a={1:2}",
			"{1:2}",
			"factorial(2)",
			"pow(2,3)",
			"pow(3,3)",
			"3^3",
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Coding/TheProject",
		"/C/Coding/TheProject/engine/build",
		"/C/Coding/TheProject/engine/examples",
		"/C/Coding/TheProject/engine/examples/RenderingSample",
		"/C/Coding/TheProject/engine/src"
	],
	"file_history":
	[
		"/C/Coding/TheProject/.gitmodules",
		"/C/Coding/Builder/example.bconf",
		"/C/Coding/Builder/builder.py",
		"/C/Coding/TheProject/docs/Todo.txt",
		"/C/Coding/TheEngine2/build/CMakeLists.txt",
		"/C/Coding/TheEngine2/third_party/physfs/CMakeLists.txt",
		"/C/Users/John Doe/AppData/Roaming/Sublime Text 3/Packages/CMakeEditor/Default.sublime-keymap",
		"/C/Coding/TheProject/build/CmakeLists.txt",
		"/C/Users/John Doe/AppData/Roaming/Sublime Text 3/Packages/Clang Format/clang_format.sublime-settings",
		"/C/Users/John Doe/AppData/Roaming/Sublime Text 3/Packages/User/clang_format.sublime-settings",
		"/C/Coding/TheProject/voxel_octree/launcher.py",
		"/C/Users/John Doe/AppData/Roaming/Sublime Text 3/Packages/User/C++YouCompleteMe.sublime-settings",
		"/C/Coding/TheEngine2/build/engine_builder.py",
		"/C/Coding/TheEngine2/build/bin/glxw/out.txt",
		"/C/Coding/TheEngine2/include/filesystem/IFileReader.h",
		"/C/Coding/TheEngine2/examples/flags/RenderingSample.cpp.flags",
		"/C/Coding/TheEngine2/examples/RenderingSample/RenderingSample.cpp",
		"/C/Coding/TheEngine2/.ycm_extra_conf.py",
		"/C/Coding/TheEngine2/examples/.ycm_extra_conf.py",
		"/C/Coding/TheEngine2/build/build.py",
		"/C/Coding/TheEngine2/include/EngineForwardDeclares.h",
		"/C/Coding/TheEngine2/src/platform/WindowsFileSystem.cpp",
		"/C/Coding/TheEngine2/src/filesystem/FileReader.cpp",
		"/C/Coding/TheEngine2/src/filesystem/FileReader.h",
		"/C/Users/John Doe/AppData/Roaming/Sublime Text 3/Packages/C++YouCompleteMe/C++YouCompleteMe.sublime-settings",
		"/C/Coding/YouCompleteMe/python/test_requirements.txt",
		"/C/Coding/TheEngine2/src/platform/LinuxFileSystem.h",
		"/C/Coding/TheEngine2/src/filesystem/FileSystem.cpp",
		"/C/Coding/YouCompleteMe/install.py",
		"/C/Users/John Doe/Desktop/hosts",
		"/C/Coding/lab0/lab0.py",
		"/C/Users/John Doe/AppData/Roaming/Sublime Text 3/Packages/Anaconda/Default (Windows).sublime-keymap",
		"/C/Coding/lab0/tester.py",
		"/C/Users/John Doe/AppData/Roaming/Sublime Text 3/Packages/Default/Preferences.sublime-settings",
		"/C/Users/John Doe/AppData/Roaming/Sublime Text 3/Packages/Anaconda/Anaconda.sublime-settings",
		"/C/Users/John Doe/AppData/Roaming/Sublime Text 3/Packages/User/Python.sublime-settings",
		"/C/Users/John Doe/AppData/Roaming/Skype/My Skype Received Files/Jamba-Macro.lua",
		"/C/Users/John Doe/AppData/Roaming/Skype/My Skype Received Files/Jamba.lua",
		"/C/Users/John Doe/Desktop/self_analysis.txt",
		"/C/Program Files (x86)/Steam/steamapps/common/Half-Life/cstrike/config.cfg"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"GL_CONTEXT_FLAG",
			"GL_CONTEXT_FLAGS",
			"glGetIntegerv",
			"a",
			"FLAGS",
			" if len(pattern) < 1:\n        raise Exception(\"Pattern must be at least of length 1\")\n\n    ",
			"print"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/C/Coding/TheProject/docs/Ideas.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/C/Coding/TheProject/engine/examples/RenderingSample/RenderingSample.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2958,
						"regions":
						{
						},
						"selection":
						[
							[
								438,
								438
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/C/Coding/TheProject/engine/build/build.py",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 110,
						"regions":
						{
						},
						"selection":
						[
							[
								110,
								110
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/C/Coding/TheProject/build/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1576,
						"regions":
						{
						},
						"selection":
						[
							[
								815,
								815
							]
						],
						"settings":
						{
							"syntax": "Packages/CMakeEditor/CMakeEditor.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/C/Coding/TheProject/engine/build/engine_builder.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3672,
						"regions":
						{
						},
						"selection":
						[
							[
								2532,
								2532
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/C/Coding/TheProject/engine/src/render/GLRendererDebugMessageMonitor.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2052,
						"regions":
						{
						},
						"selection":
						[
							[
								479,
								479
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/C/Coding/TheProject/engine/third_party/glfw/src/internal.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 29344,
						"regions":
						{
						},
						"selection":
						[
							[
								2483,
								2515
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 394.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/C/Coding/TheProject/engine/build/build_common.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 280,
						"regions":
						{
						},
						"selection":
						[
							[
								59,
								76
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 8,
					"file": "/C/Coding/TheProject/engine/src/render/OpenGL.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14195,
						"regions":
						{
						},
						"selection":
						[
							[
								14195,
								14195
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7304.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.491396426208,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.CppYCM.2":
	{
		"height": 378.0
	},
	"output.CppYCM.3":
	{
		"height": 0.0
	},
	"output.CppYCM.4":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 270.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "TheProject.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"filesystem",
				"src\\filesystem\\FileSystem.cpp"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 320.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
